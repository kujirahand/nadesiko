#-----------------------------------------------------------------------
# CGIを利用するためのユニット
#-----------------------------------------------------------------------
!変数宣言が必要
#-----------------------------------------------------------------------
CNAKOモードは「CGI」# エラー表示などをブラウザに表示できるようにするおまじない
#-----------------------------------------------------------------------
# HTMLのフォームに書かれた文字列を取得してハッシュに取得する
# 引　数：メソッド(省略時は自動判定)
# 戻り値：フォームデータ（ハッシュ形式）
# 利用例：
#　　　　Ｓ＝"GET"のフォーム取得
#　　　　Ｓ＠「mode」を表示
#　　　　Ｓ＠「comment」を表示。
●フォーム取得({=?}メソッドの)
　　結果とはハッシュ
　　クエリーとは文字列
　　F名前とは文字列
　　F値とは文字列
　　TMPとは文字列
　　(メソッドを半角変換を大文字変換)で条件分岐
　　　　空ならば
　　　　　　クエリー=クエリー取得処理
　　　　"GET"ならば
　　　　　　クエリー="QUERY_STRING"の環境変数取得
　　　　"POST"ならば
　　　　　　クエリー=("CONTENT_LENGTH"の環境変数取得)の標準入力取得
　　クエリーを"&"で区切るで反復
　　　　TMP=対象を"="で区切る
　　　　F名前=TMP[0]をURLデコードをSJIS変換
　　　　F値=TMP[1]をURLデコードをSJIS変換
　　　　結果@F名前=F値
　　結果を戻す

●クエリー取得処理
    もし("REQUEST_METHOD"の環境変数取得を大文字変換)="GET"ならば
    　　"QUERY_STRING"の環境変数取得で戻る
　　違えば
        ("CONTENT_LENGTH"の環境変数取得)の標準入力取得で戻る

●ブラウザ名取得
    "HTTP_USER_AGENT"の環境変数取得

●リンク元取得
　　"HTTP_REFERER"の環境変数取得

●リモートIPアドレス取得
　　"REMOTE_ADDR"の環境変数取得

#-----------------------------------------------------------------------
＃ファイルのアップロードがあったとき、送信されたファイルを得る
＃引　数：なし
＃戻り値：ファイルデータ（ハッシュ形式）
＃利用例：
＃　　　　Ｓ＝マルチパートフォーム取得
＃　　　　Ｓ＠「名前１」を表示
＃　　　　Ｓ＠「名前２」を表示。
＃　　　　マルチパートファイル名＠『ABC』を表示
＃備考：
＃　ＨＴＭＬについて
＃　| <FORM method="post" action="get.nako" enctype="multipart/form-data">
＃　| <INPUT type="file" name="ABC" id="file">
＃　のタグから得られるファイルは ABC という名前
＃　送信されたファイルのファイル名は『マルチパートファイル名』に得られる
マルチパートファイル名とはハッシュ。＃グローバル変数
●マルチパートフォーム取得
　　クエリーとは文字列
    区切り文字とは文字列
　　ヘッダとは文字列
    ヘッダ辞書とはハッシュ
    データとは文字列
    結果とはハッシュ
    CNTとは数値=0
    ＨＮとは文字列
    ＨＶとは文字列
    ＃クエリーの取得
    クエリー取得処理してクエリーに代入。
    ＃クエリーの解析
    区切り文字はクエリーから改行までを切り取ったもの。
    （クエリー＜＞空）の間
    　　＃スプリッタの取得に失敗していれば区切りを得る
        もし、区切り文字＝「」ならば
    　　　　区切り文字はクエリーから改行までを切り取ったもの。
            続ける
        もし、LEFT(クエリー,2)="--"ならば抜ける。
        ＃ヘッダを得る
        ヘッダはクエリーから改行＆改行までを切り取ったもの。
        ＃スプリッタ終了まで得る
        データはクエリーから改行＆区切り文字までを切り取ったもの。
        もし、RIGHTB(データ,2)=改行ならば
            データの（データの文字数-１）から2バイト削除
        ＃ヘッダの解析
        ヘッダ辞書は「」
        ヘッダを反復
        　　「;」で区切る
            反復
            　　ＨＶ＝それ
                ＨＮ＝ＨＶから「=」まで切り取る
                ＨＮ＝トリム（ＨＮ）
                ＨＮ＝ＨＮを小文字変換
                ＨＶ＝ＨＶから囲みトリム
                ヘッダ辞書＠HN=HV
        ＨＮ＝ヘッダ辞書＠「name」
        もし、ＨＮが空ならば、ＨＮ＝「file{CNT}」
        結果＠HN＝データ
        マルチパートファイル名＠HN=ヘッダ辞書＠「filename」
        ＃マルチパートファイル名を言う
        CNT=CNT+1
    ここまで
　　それは結果。

●ファイルロック(ファイル名の|ファイル名を)
　　ロック名とは文字列
    ロック名=ファイル名のロックファイル名作成
    10回
        もし(ロック名が存在=0)ならば
        　　ロック名にフォルダ作成。
            1で戻る
        違えば
        　　0.5秒待つ
    0で戻る

●ファイルロック解除(ファイル名の｜ファイル名を)
　　ロック名とは文字列
    ロック名=ファイル名のロックファイル名作成
    もし(ロック名が存在)ならば
    　　ロック名のフォルダ削除

●ロックファイル名作成(Fで｜Fの)
　　F=Fの「:」を「_」に置換。 # フォルダ名があってもロックを可能にする
　　F=Fの「\」を「_」に置換。 # フォルダ名があってもロックを可能にする
　　F=Fの「.」を「_」に置換。 # 気休めに
　　「lock-」&Fで戻る

●強制ページ移動（コメントでURLへ）
　　「Content-type: text/html{~}{~}」を表示。
    「<html><head>
<META HTTP-EQUIV="refresh" CONTENT="0; URL={URL}">
<title>{コメント}</title>
</head>
<body>
<h1>{コメント}</h1>
もしページ移動しない時は<A href="{URL}">ここをクリック</A>してください。
</body></html>」を表示。
　　終わり。

!変数宣言が不要