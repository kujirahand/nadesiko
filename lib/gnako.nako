#============================================================
# GNAKO.EXE - (なでしこ API版GUI )のためのラッパーグループ
# Ver.1.06a 2005/03/15
#　by SWinX :RECTグループごとメンバに取り込み
#============================================================
!変数宣言が必要
!変数宣言はシステム
!「Windows.nako」を取り込む

●標準フォント変更(ハンドルの)
　HFONTとは整数
　HFONT=GetStockObject(17)
　SendMessage(ハンドル,WM_SETFONT,HFONT,1)

●固定フォント変更(ハンドルの)
　HFONTとは整数
　HFONT=GetStockObject(16)
　SendMessage(ハンドル,WM_SETFONT,HFONT,1)

■RECT
　・X1
　・Y1
　・X2
　・Y2

!RECT_TYPEとは文字列 =「long,long,long,long」
!POINT_TYPEとは文字列 =「long,long」

#------------------------------------------------------------
# GUI用下請け関数
#------------------------------------------------------------
部品間隔とは整数 = 8
部品管理番号とは整数 = 0

●部品管理番号取得
　それは部品管理番号
　部品管理番号=部品管理番号+１

●初期テキスト切り出し(変数名から部品名を)
　変数名から部品名まで切り取る。

■GUI部品
　・ID
　・ハンドル
  ・{非公開 RECT}FR
  ・{非公開 文字列}FS{="0123456789ABCDEF"} //16バイト確保
　・{非公開}窓サイズ取得〜
  　GetWindowRect(ハンドル, FS)
　　UNPACK(FS,FR,RECT_TYPE)
　　FR.X2=FR.X2-FR.X1
　　FR.Y2=FR.Y2-FR.Y1
　　もし、名前≠「母艦」ならば
    　ScreenToClient(母艦ハンドル, FS)
　　　UNPACK(FS,FR,POINT_TYPE)
　・{非公開}窓サイズ設定〜
  　MoveWindow(ハンドル, FR.X1, FR.Y1, FR.X2, FR.Y2, 1)
  ・{非公開}X取得   〜窓サイズ取得。それ=FR.X1
  ・{非公開}X設定(V)〜窓サイズ取得。FR.X1=V。窓サイズ設定。
　・X　←X設定　→X取得 # 部品のX座標
  ・{非公開}Y取得   〜窓サイズ取得。それ=FR.Y1
  ・{非公開}Y設定(V)〜窓サイズ取得。FR.Y1=V。窓サイズ設定。
　・Y　←Y設定　→Y取得 # 部品のY座標
  ・{非公開}W取得   〜窓サイズ取得。それ=FR.X2
  ・{非公開}W設定(V)〜窓サイズ取得。FR.X2=V。窓サイズ設定。
　・W　←W設定　→W取得 # 部品の幅
  ・{非公開}H取得   〜窓サイズ取得。それ=FR.Y2
  ・{非公開}H設定(V)〜窓サイズ取得。FR.Y2=V。窓サイズ設定。
　・H　←H設定　→H取得 # 部品の高さ
  ・幅　←W設定　→W取得 # 部品の幅
  ・高さ←H設定　→H取得 # 部品の高さ
　・{非公開}可視設定(V)〜
　　　もしVならば、ShowWindow(ハンドル, SW_SHOW)
　　　違えば、ShowWindow(ハンドル, SW_HIDE)
　・{非公開}可視取得〜IsWindowVisible(ハンドル)
　・可視 ←可視設定 →可視取得
　・{非公開}有効設定(V)〜EnableWindow(ハンドル,(V≠0))
　・{非公開}有効取得   〜IsWindowEnabled(ハンドル)
　・有効 ←有効設定 →有効取得
  ・注目〜SetFocus(ハンドル)
  ・ポケット # 一時データの格納に使える
  ・タグ # 一時データの格納に使える
　・{非公開}F最前面表示{=0}
　・{非公開}最前面表示取得〜それはF最前面表示
　・{非公開}最前面表示設定(Vに)〜
　　　F最前面表示はV
　　　もし、Vがオンならば、SetWindowPos(ハンドル,-1,0,0,0,0,SWP_NOACTIVATE||SWP_NOSIZE||SWP_NOMOVE||SWP_NOOWNERZORDER||SWP_SHOWWINDOW)
　　　違えば、SetWindowPos(ハンドル,-2,0,0,0,0,SWP_NOACTIVATE||SWP_NOSIZE||SWP_NOMOVE||SWP_NOOWNERZORDER||SWP_SHOWWINDOW)
　・最前面表示←最前面表示設定　→最前面表示取得 # 部品を最前面に表示する
　・最前面解除〜SetWindowPos(ハンドル,-2,0,0,0,0,SWP_NOACTIVATE||SWP_NOSIZE||SWP_NOMOVE||SWP_NOOWNERZORDER||SWP_SHOWWINDOW)
　・{非公開}位置取得〜それは「{X},{Y}」
　・{非公開}位置設定(V)〜
　　　X=Vの「,」まで切り取ったもの
　　　Y=Vの「,」まで切り取ったもの
　・位置←位置設定→位置取得 # 部品の座標を「X,Y」の形式(文字列)で「10,10」のように指定する
　・{非公開}サイズ取得〜それは「{X},{Y},{X+W},{Y+H}」
　・{非公開}サイズ設定(V)〜
　　　X=Vの「,」まで切り取ったもの
　　　Y=Vの「,」まで切り取ったもの
　　　W=(Vの「,」まで切り取ったもの)-X
　　　H=(Vの「,」まで切り取ったもの)-Y
　・サイズ←サイズ設定→サイズ取得 # 部品のサイズを「X1,Y1.X2.Y2」の形式(文字列)で「10,10,100,30」のように指定する
　・下側〜それは「{X},{Y+H+部品間隔}」# 部品の下側の位置を返す
　・右側〜それは「{X+W+部品間隔},{Y}」# 部品の下側の位置を返す
　・壊す〜 # 部品を削除する
　　　DestroyWindow(ハンドル)
　・メッセージ送信（MSG,W,L)〜# 部品に Windows API を使ってメッセージを送信する
　　　SendMessage(ハンドル,MSG,W,L)

■テキストプロパティ
　・ハンドル
　・{非公開}テキスト設定(V)〜SetWindowText(ハンドル, "{V}")
　・{非公開}テキスト取得〜
　　LENとは整数
　　STRとは文字列
　　LEN = GetWindowTextLength(ハンドル)
　　STRに(LEN+1)を確保
　　GetWindowText(ハンドル, STR, LEN+1)
　　それはLEFTB(STR,LEN)
　・テキスト　←テキスト設定　→テキスト取得

■選択テキストプロパティ +テキストプロパティ
　・ハンドル
　・{非公開}F選択開始位置{=0}
　・{非公開}F選択終了位置{=0}
　・{非公開}選択位置取得〜
  　SendMessage(ハンドル,EM_GETSEL,POINTER(F選択開始位置),POINTER(F選択終了位置))
　　テキストでF選択開始位置を文字数変換
　・{非公開}選択位置設定(V)〜
　　テキストでVをバイト数変換
　　F選択開始位置=それ。F選択終了位置=それ
  　SendMessage(ハンドル,EM_SETSEL,F選択開始位置,F選択終了位置)
　・選択位置　←選択位置設定　→選択位置取得
　・{非公開}選択文字列設定(V)〜
  　SendMessage(ハンドル,EM_REPLACESEL,はい,POINTER("{V}"))
　・{非公開}選択文字列取得〜
　　SendMessage(ハンドル,EM_GETSEL,POINTER(F選択開始位置),POINTER(F選択終了位置))
　　もし、F選択終了位置<F選択開始位置ならば
    　それ=F選択終了位置。F選択終了位置=F選択開始位置。F選択開始位置=それ。
　　MIDB(テキスト,F選択開始位置+1,(F選択終了位置-F選択開始位置))
　・選択文字列　←選択文字列設定　→選択文字列取得
　・{非公開}選択文字数取得〜文字数(選択文字列)
　・{非公開}選択文字数設定(V)〜
　　SendMessage(ハンドル,EM_GETSEL,POINTER(F選択開始位置),POINTER(F選択終了位置))
　　RIGHTB(テキスト,バイト数(テキスト)-F選択開始位置)でVをバイト数変換
    F選択終了位置はF選択開始位置+それ。
  　SendMessage(ハンドル,EM_SETSEL,F選択開始位置,F選択終了位置)
　・選択文字数　←選択文字数設定　→選択文字数取得
　・{非公開}バイト数変換(SでNを)〜バイト数(LEFT(S,N))
　・{非公開}文字数変換(SでNを)〜文字数(LEFTB(S,N))
  ・切り取り〜SendMessage(ハンドル,WM_CUT,0,0)
  ・コピー〜SendMessage(ハンドル,WM_COPY,0,0)
　・貼り付け〜SendMessage(ハンドル,WM_PASTE,0,0)
　・UNDO〜SendMessage(ハンドル,EM_UNDO,0,0)
　・全選択〜SendMessage(ハンドル,EM_SETSEL,0,-1)
  

■エディタ系部品　+GUI部品　+選択テキストプロパティ
　・{イベント}クリックした時
　・{イベント}ダブルクリックした時
　・{イベント}変更した時

#-------------------------------------------------------------------------------
# メニュー系 (Vnako互換を目指す)
ルートメニューハンドル = 0
●メニュー高取得
　それ=GetSystemMetrics(SM_CYMENUSIZE)

■メニュー機能
　・ハンドル
　・親ハンドル
　・ID
　・位置
　・メニュー種類〜
　　　もしハンドル=0ならば
　　　　もしFテキスト="-"ならば、それ=MF_SEPARATOR
　　　　違えば、それ=MF_STRING
　　　違えば、それ=MF_POPUP
　・{非公開}Fテキスト
　・{非公開}テキスト設定(V)〜FテキストはV。テキスト更新。
　・{非公開}テキスト更新〜
　　　もし親ハンドル≠0ならば
　　　　もしメニュー種類=MF_POPUPならば
　　　　　ModifyMenu(親ハンドル,位置,MF_POPUP||MF_BYPOSITION,ハンドル,Fテキスト)
　　　　違えば
　　　　　ModifyMenu(親ハンドル,ID,メニュー種類,ID,Fテキスト)
　　　DrawMenuBar(母艦ハンドル)
　・{非公開}テキスト取得〜それはFテキスト
　・テキスト　←テキスト設定　→テキスト取得
　・親設定(Vに)〜
　　　もし親ハンドル≠0ならば
　　　　「GNAKO:同じアイテムを複数回登録することはできません」とエラー発生。
　　　親ハンドル=V
　　　位置=GetMenuItemCount(親ハンドル)
　　　もしメニュー種類=MF_POPUPならば
　　　　AppendMenu(親ハンドル,MF_POPUP,ハンドル,Fテキスト)
　　　違えば
　　　　AppendMenu(親ハンドル,メニュー種類,ID,Fテキスト)
　・追加({メニュー機能}メニュー変数を)〜
　　　もしハンドル=0ならば
　　　　ハンドル=CreateMenu
　　　　テキスト更新
　　　対象=ハンドル
　　　メニュー変数→親設定(対象)
　　　DrawMenuBar(母艦ハンドル)


■メニュー　＋メニュー機能
　・{非公開}Fチェック
　・{非公開}チェック取得〜それはFチェック
　・{非公開}チェック設定(V)〜
　　　FチェックはV
　　　もし親ハンドル≠0ならば
　　　　もし種類=MF_STRINGならば
　　　　　もし、Fチェックならば、CheckMenuItem(親ハンドル, ID, MF_CHECKED)
　　　　　違えば、CheckMenuItem(親ハンドル, ID, MF_UNCHECKED)
　・チェック　←チェック設定　→チェック取得
　・{イベント}クリックした時
　・種類{="メニュー"}
　・作る〜
　　　ID = 部品管理番号取得。
　　　ハンドル=0
　　　親ハンドル=0
　　　名前から種類を初期テキスト切り出ししてFテキストに代入。
　　　WM_COMMANDにIDの「{名前}のクリックした時」をイベント登録。

■ポップアップメニュー　＋メニュー機能
　・種類{="ポップアップメニュー"}
　・作る〜
　　　ID = 部品管理番号取得。
　　　ハンドル=CreatePopupMenu
　　　親ハンドル=0

■メインメニュー ＋メニュー機能
　・種類{="メインメニュー"}
　・作る〜
　　　もしルートメニューハンドルが0ならば
　　　　ハンドル=CreateMenu
　　　　親ハンドル=0
　　　　SetMenu(母艦ハンドル, ハンドル)
　　　　DrawMenuBar(母艦ハンドル)
　　　　ルートメニューハンドル=ハンドル
　　　違えば
　　　　「GNAKO:メインメニューを複数作ることはできません」とエラー発生。

■UNION
　・{整数}値
　・{非公開}HIWORD設定(V)〜値=AND(値,$FFFF)+(AND(V,$FFFF)<<16)
　・{非公開}HIWORD取得   〜AND(値>>16,$FFFF)
　・HIWORD　←HIWORD設定　→HIWORD取得
　・{非公開}LOWORD設定(V)〜値=AND(値,$FFFF0000)+AND(V,$FFFF)
　・{非公開}LOWORD取得   〜AND(値,$FFFF)
　・LOWORD　←LOWORD設定　→LOWORD取得

■ポップアッププロパティ
　・ハンドル
　・{非公開}Fポップアップハンドル{=0}
  ・{非公開}ポップアップメニュー設定({ポップアップメニュー}Vを)〜
　　FポップアップハンドルはV→ハンドル
　　HWNDとはUNION。HWNDの値=ハンドル。
    WM_CONTEXTMENUのHWND.HIWORDにHWND.LOWORDを「{名前}の右クリックした時」でイベント詳細登録
　・{非公開}ポップアップメニュー取得〜それ=Fポップアップハンドル
  ・ポップアップメニュー　←ポップアップメニュー設定　→ポップアップメニュー取得
　・右クリックした時〜
　　もし、Fポップアップハンドル=0ならば戻る
　　LPとはUNION。LPの値=LPARAM。
　　TrackPopupMenu(Fポップアップハンドル,2,LP.LOWORD,LP.HIWORD,0,母艦ハンドル,0)

#-------------------------------------------------------------------------------
# パネル・フォーム系部品

■フォーム　＋GUI部品　＋テキストプロパティ　+ポップアッププロパティ
　・{イベント}クリックした時
　・{イベント}マウス離した時
　・{イベント}変更した時　　　　# ウィンドウの変更が終わった時
　・{イベント}サイズ変更した時　# サイズを変更している途中の時
　・テキスト←テキスト設定 →テキスト取得　デフォルト# フォームキャプションの変更
　・タイトル←テキスト設定 →テキスト取得　デフォルト# フォームキャプションの変更
　・{非公開}クライアントサイズ取得〜
  　GetClientRect(ハンドル, FS)
　　UNPACK(FS,FR,RECT_TYPE)
　　FR.X2=FR.X2-FR.X1
　　FR.Y2=FR.Y2-FR.Y1
　・{非公開}ＣＷ取得   〜クライアントサイズ取得。それ=FR.X2
　・{非公開}ＣＷ設定(V)〜W=W-ＣＷ取得+V
　・クライアントＷ←ＣＷ設定　→ＣＷ取得
　・クライアント幅←ＣＷ設定　→ＣＷ取得
　・{非公開}ＣＨ取得   〜クライアントサイズ取得。それ=FR.Y2
　・{非公開}ＣＨ設定(V)〜H=H-ＣＨ取得+V
　・クライアントＨ←ＣＨ設定　→ＣＨ取得　
　・クライアント高さ←ＣＨ設定　→ＣＨ取得　
　・種類{="フォーム"}
  ・作る〜
　　　ID = 部品管理番号取得。
　　　ハンドルは母艦ハンドル。
　　　WM_LBUTTONDOWNに-1の「{名前}のクリックした時」をイベント登録
　　　WM_LBUTTONUPに-1の「{名前}のマウス離した時」をイベント登録
　　　WM_EXITSIZEMOVEに-1の「{名前}の変更した時」をイベント登録
　　　WM_SIZEに-1の「{名前}のサイズ変更した時」をイベント登録

//CreateWindowExの引数
//拡張スタイル,クラス名,テキスト,スタイル,X,Y,H,W,親ハンドル,ID,インスタンスハンドル,0

■ボタン　＋GUI部品　＋テキストプロパティ　＋ポップアッププロパティ
　・{イベント}クリックした時
　・種類{="ボタン"}
　・作る〜
　　　ID = 部品管理番号取得。
　　　初期テキストとは文字列
　　　名前から種類を初期テキスト切り出しして初期テキストに代入。
　　　ハンドルは、CreateWindowEx(
　　　　0,"BUTTON",初期テキスト,
　　　　WS_CHILD||WS_VISIBLE||WS_CLIPSIBLINGS||WS_TABSTOP||BS_PUSHBUTTON,
　　　　基本X,基本Y,75,25,
　　　　母艦ハンドル,ID,インスタンスハンドル,0)
　　　もし、ハンドルが0ならば、「Gnako:{名前}の作成に失敗しました」とエラー発生。
　　　ハンドルの標準フォント変更
      WM_COMMANDにIDの「{名前}のクリックした時」をイベント登録
　　　基本Y=基本Y+H+部品間隔


■チェック　＋GUI部品　＋テキストプロパティ　＋ポップアッププロパティ
　・{非公開}値設定(V)〜
　　　Vで条件分岐
　　　　0ならば、SendMessage(ハンドル , BM_SETCHECK , BST_UNCHECKED , 0)
　　　　1ならば、SendMessage(ハンドル , BM_SETCHECK , BST_CHECKED , 0)
　　　　2ならば、SendMessage(ハンドル , BM_SETCHECK , BST_INDETERMINATE , 0)
　・{非公開}値取得〜
　　　SendMessage(ハンドル , BM_GETCHECK , 0 , 0)
　・値　←値設定　→値取得
　・{イベント}クリックした時
　・種類{="チェック"}
　・作る〜
　　　ID = 部品管理番号取得。
　　　初期テキストとは文字列
　　　名前から種類を初期テキスト切り出しして初期テキストに代入。
　　　ハンドルは、CreateWindowEx(
　　　　0,"BUTTON",初期テキスト,
　　　　WS_CHILD||WS_VISIBLE||WS_CLIPSIBLINGS||WS_TABSTOP||BS_AUTOCHECKBOX,
　　　　基本X,基本Y,97,17,
　　　　母艦ハンドル,ID,インスタンスハンドル,0)
　　　もし、ハンドルが0ならば、「Gnako:{名前}の作成に失敗しました」とエラー発生。
　　　ハンドルの標準フォント変更
　　　WM_COMMANDにIDの「{名前}のクリックした時」をイベント登録
　　　基本Y=基本Y+H+部品間隔


■バー管理
　・{配列}バー配列
　・バー登録(HをSで)〜
　　バー配列の配列要素数。対象=それ。
　　バー配列[対象][0]=H。バー配列[対象][1]=S
　　WM_HSCROLLに-1の「{名前}のスクロール時」をイベント登録
　　WM_VSCROLLに-1の「{名前}のスクロール時」をイベント登録
　・スクロール時〜
　　バー配列の0からLPARAMを表完全一致ピックアップ
    反復
    　対象[1]をナデシコする

■バー　＋GUI部品
　・{イベント}変更した時
　・{非公開}F最小値
　・{非公開}F最大値
　・{非公開}レンジ更新〜SetScrollRange(ハンドル,SB_CTL,F最小値,F最大値,はい)
　・{非公開}最小値取得〜それ=F最小値。
　・{非公開}最小値設定(V)〜F最小値=V。レンジ更新。
　・最小値　←最小値設定 →最小値取得
　・{非公開}最大値取得〜それ=F最大値。
　・{非公開}最大値設定(V)〜F最大値=V。レンジ更新。
　・最大値　←最大値設定 →最大値取得
　・{非公開}F有効
  ・{非公開}有効取得〜それ=F有効
　・{非公開}有効設定(V)〜
　　　F有効=V
　　　もしV≠0ならば、EnableScrollBar(ハンドル,SB_CTL,ESB_ENABLE_BOTH)
      違えば、EnableScrollBar(ハンドル,SB_CTL,ESB_DISABLE_BOTH)
　・有効　←有効設定 →有効取得
　・{非公開}値取得〜それ=GetScrollPos(ハンドル,SB_CTL)
　・{非公開}値設定(V)〜SetScrollPos(ハンドル,SB_CTL,V,はい)。変更した時。
　・値　←値設定 →値取得 デフォルト
　・種類{="バー"}
  ・作る〜
　　　ID = 部品管理番号取得。
      ハンドルは、CreateWindowEx(
          0,"SCROLLBAR","",
          (WS_CHILD||WS_VISIBLE||WS_CLIPSIBLINGS||WS_TABSTOP),
          基本X,基本Y,121,16,母艦ハンドル,ID,0,0)
　　　基本Y=基本Y+H+部品間隔。
　　　Aとは数値。Bとは文字列
　　　A=ハンドル。B=「{名前}のスクロール時」
      AをBでバー管理へバー登録
　　　F最小値=0; F最大値=100; F有効=はい;
      レンジ更新。
　・スクロール時〜
　　　WPとはUNION。
　　　WPの値=WPARAM
      WP.LOWORDで条件分岐
　　　　SB_LINEUPならば、値=値-1
　　　　SB_LINEDOWNならば、値=値+1
　　　　SB_PAGEUPならば、値=値-10
　　　　SB_PAGEDOWNならば、値=値+10
        SB_THUMBPOSITIONならば、値=WP.HIWORD
        SB_THUMBTRACKならば、値=WP.HIWORD
        SB_TOPならば、値=F最小値
        SB_BOTTOMならば、値=F最大値

#-------------------------------------------------------------------------------
# エディタ系部品

■エディタ　+エディタ系部品
　・種類{="エディタ"}
　・作る〜
　　　ID = 部品管理番号取得。
　　　ハンドルは、CreateWindowEx(
　　　　WS_EX_CLIENTEDGE,"EDIT","",
　　　　(WS_CHILD||WS_VISIBLE||WS_CLIPSIBLINGS||WS_TABSTOP||
　　　　ES_NOHIDESEL||ES_AUTOHSCROLL||ES_AUTOVSCROLL||ES_LEFT),
　　　　基本X,基本Y,121,21,
　　　　母艦ハンドル,ID,インスタンスハンドル,0)
　　　もし、ハンドルが0ならば、「Gnako:{名前}の作成に失敗しました」とエラー発生。
　　　ハンドルの標準フォント変更
　　　WM_COMMANDの0にIDを「{名前}のクリックした時」でイベント詳細登録
　　　WM_COMMANDのEN_CHANGEにIDを「{名前}の変更した時」でイベント詳細登録
　　　基本Y=基本Y+H+部品間隔


■メモ　+エディタ系部品
　・種類{="メモ"}
　・作る〜
　　　ID = 部品管理番号取得。
　　　ハンドルは、CreateWindowEx(
　　　　WS_EX_CLIENTEDGE,"EDIT","",
　　　　(WS_CHILD||WS_VISIBLE||WS_CLIPSIBLINGS||WS_TABSTOP||
        WS_VSCROLL||WS_HSCROLL||
　　　　ES_AUTOVSCROLL||ES_MULTILINE||ES_LEFT),
　　　　基本X,基本Y,185,89,
　　　　母艦ハンドル,ID,インスタンスハンドル,0)
　　　もし、ハンドルが0ならば、「Gnako:{名前}の作成に失敗しました」とエラー発生。
　　　ハンドルの固定フォント変更
　　　WM_COMMANDの-1にIDを「{名前}のクリックした時」でイベント詳細登録
　　　WM_COMMANDのEN_CHANGEにIDを「{名前}の変更した時」でイベント詳細登録
　　　基本Y=基本Y+H+部品間隔


■コンボ　+GUI部品　＋テキストプロパティ　＋ポップアッププロパティ
　・{非公開}Fアイテム
　・{非公開}アイテム設定(V)〜
　　　FアイテムにVを代入
　　　SendMessage(ハンドル , WM_SETREDRAW , いいえ , 0)
　　　SendMessage(ハンドル , CB_RESETCONTENT , 0 , 0)
　　　Vを反復
　　　　SendMessage(ハンドル , CB_ADDSTRING , 0 , POINTER("{それ}"))
　　　SendMessage(ハンドル , WM_SETREDRAW , はい , 0)
　・{非公開}アイテム取得〜それはFアイテム
　・アイテム　←アイテム設定　→アイテム取得
　・{非公開}値設定(V)〜SendMessage(ハンドル , CB_SETCURSEL , V , 0)
　・{非公開}値取得   〜SendMessage(ハンドル , CB_GETCURSEL , 0 , 0)
　・値　←値設定　→値取得
　・{イベント}クリックした時
　・種類{="コンボ"}
　・作る〜
　　　ID = 部品管理番号取得。
　　　ハンドルは、CreateWindowEx(
　　　　0,"COMBOBOX","",
　　　　(WS_CHILD||WS_VISIBLE||WS_CLIPSIBLINGS||WS_TABSTOP||WS_VSCROLL||
　　　　CBS_HASSTRINGS||CBS_AUTOHSCROLL||CBS_DROPDOWN),
　　　　基本X,基本Y,145,180,
　　　　母艦ハンドル,ID,インスタンスハンドル,0)
　　　もし、ハンドルが0ならば、「Gnako:{名前}の作成に失敗しました」とエラー発生。
　　　ハンドルの固定フォント変更
　　　WM_COMMANDにIDの「{名前}のクリックした時」をイベント登録
　　　基本Y=基本Y+21+部品間隔

#-------------------------------------------------------------------------------
# リスト系部品

■リスト　＋GUI部品　＋ポップアッププロパティ
　・{非公開}Fアイテム
　・{非公開}アイテム設定(V)〜
　　　FアイテムにVを代入
　　　SendMessage(ハンドル , WM_SETREDRAW , いいえ , 0)
　　　SendMessage(ハンドル , LB_RESETCONTENT , 0 , 0)
　　　Vを反復
　　　　SendMessage(ハンドル , LB_ADDSTRING , 0 , POINTER("{それ}"))
　　　SendMessage(ハンドル , WM_SETREDRAW , はい , 0)
　・{非公開}アイテム取得〜それはFアイテム
　・アイテム　←アイテム設定　→アイテム取得
　・{非公開}値設定(V)〜SendMessage(ハンドル , LB_SETCURSEL , V , 0)
　・{非公開}値取得   〜SendMessage(ハンドル , LB_GETCURSEL , 0 , 0)
　・値　←値設定　→値取得
　・{非公開}テキスト設定(V)〜
　　　Indexとは整数
　　　Index = 値
　　　もしIndex>=0ならば
　　　　Fアイテム[Index]=V
　　　　SendMessage(ハンドル , LB_DELETESTRING , Index , 0)
　　　　SendMessage(ハンドル , LB_INSERTSTRING , Index , POINTER("{V}"))
　　　　値=Index
　・{非公開}テキスト取得〜
　　　もし値>=0ならば、それ=Fアイテム[値]
　　　違えば、それ=""
　・テキスト　←テキスト設定　→テキスト取得
　・{イベント}クリックした時
　・種類{="リスト"}
　・作る〜
　　　ID = 部品管理番号取得。
　　　ハンドルは、CreateWindowEx(
　　　　　WS_EX_CLIENTEDGE,"LISTBOX","",
　　　　　(WS_CHILD||WS_VISIBLE||WS_CLIPSIBLINGS||WS_TABSTOP||WS_VSCROLL||
          LBS_NOINTEGRALHEIGHT||LBS_HASSTRINGS||LBS_NOTIFY),
　　　　　基本X,基本Y,121,97,
　　　　　母艦ハンドル,ID,インスタンスハンドル,0)
　　　もし、ハンドルが0ならば、「Gnako:{名前}の作成に失敗しました」とエラー発生。
　　　ハンドルの固定フォント変更
      WM_COMMANDのLBN_SELCHANGEにIDを「{名前}のクリックした時」でイベント詳細登録
　　　基本Y=基本Y+H+部品間隔

#--------------------------------------------------
# 生成処理
#--------------------------------------------------
母艦とはフォーム。

!変数宣言が不要
!変数宣言はユーザー
#-------------------------------------------------------------------------------
