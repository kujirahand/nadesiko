#たまむれ
　#-------------------------------------------
　#【ソフト名】　たまむれ
　#【作　　者】　 U D 
　#【連 絡 先】　なし
　#【U  R  L 】　なし
　#【投 稿 日】　2007/04/01(Sun) 00:00
　#【ジャンル】　ユーティリティ/なでしこ支援
　#【なでしこバージョン】　ver.1.5002
　#【なでしこの実行方法】　標準GUI（vnako.exe）
　#【転　　載】　全て許可
　#【利用作成するファイル】　なし
　#【コメント】　↓必ず「注意」まで読んでから実行してください↓。
　#------------------------------------------
　#【更新日時】　2007/04/02(Mon) 00:00
　#【サ イ ズ】　約 28.7 KB
　#【行　　数】　約 890 行
　#------------------------------------------
/*
　＠＠　コメント：このプログラムについて　＠＠

このプログラムは、複数の球体をフィールド上に転がせたり跳ねさせたりする
シミュレーションプログラム、兼、デスクトップアクセサリー(?)です。
見るだけでも楽しめますし、自分だけのフィールドメイクも簡単(?)に可能です。
また、フィールド用の関数等は他のなでしこプログラムにも応用可能です。
たまのむれとたわむれてやってください（ぇ。

・フィールド上で右クリックするとメニューが出ます
・ショートカットキー
　[ Esc ] 終了
　[Space] ポーズ・ポーズ解除
・フィールドは４種類あり、メニューから変更できます
・基本設定、色彩設定を、メニューから変更できます

　＠＠■注意：必ずお読み下さい■＠＠
・スペックが低い、節電設定をしている、
　他のプログラムが起動している、等の状況では、
　快適に動作しない可能性があります。
・背景色と球体色が重なって見にくくなる場合があります。
　その場合、画面を右クリックしてメニューから設定を変更してください。
・計算量が多いため、長時間使用すると
　かなりの負荷がかかる可能性があります。
・物体の運動の計算について、物理的な正確性は保証しません。
・球体が壁や床を貫通する等の不自然な現象が、精度の問題上よく発生します。
　致命的なバグ等によるものではありませんのでご安心ください。

　＠＠　重大発表：個人的なことについて　＠＠
本プログラムは U D のなでしこ集大成とも言うべきもの(かもしれない)です。
また、 U D は本年度、個人的に忙しい(かもしれない)ため、
なでしこに充てることのできる時間がかなり限られてきます。
従って、集大成たるこのプログラムを本年度初めの日に投稿することをもって、
 U D がなでしこから卒業する機会とさせていただきます。
なでしこのより素晴らしい発展を願って、終わりの言葉とさせていただきます。
　　　　　　　　　　　　　　　　　　　平成１９年度　　４月１日　　草々
はい、エイプリルフールでした。御粗末です。
と言っても、忙しいのは事実ですが。

　＠＠　解説："エリア"処理用の関数について　＠＠

●エリア初期化(ARRで|ARRの)
二次元配列ARRをもとに、描画・判定に必要なエリアデータを生成・整形する。
基本的には「ID,形,判定,描画,X1,Y1,X2,Y2」の形式で指定する。
判定は、0とすると非判定対象、1とすると判定対象。(エリア判定に影響)
描画は、0とすると非描画対象、1とすると描画対象。(フィールド描画に影響)
X1,Y1,X2,Y2には、短縮名の変数W,H,Tを用いることができる。
W,Hは母艦のクライアントW,Hを表し、Tはシステム時間を表す。

設定 :  0,設定項目,値
　[ 設定項目 … 幅｜高｜半径｜背景色｜コメント ]
　基本幅・高・半径は、X2,Y2が省略された時に使用される。
　フィールド背景色の設定は一度のみ。
標準 :  ID,形,判定,描画,X1,Y1,X2,Y2
　[ 形 … 方形or円形 ][ 判定,描画 … 0or1 ]
　方形の場合、左上(X1,Y1),右下(X2,Y2)の"四角"を描画。
　X2の省略は X2=X1+基本幅　Y2の省略は Y2=Y1+基本高
　円形の場合、中心(X1,Y1),半径X2の"正円"を描画。(Y2は不要)
　X2の省略は X2=基本半径
式系 :  ID,式,判定,描画,X1,f(X),X2,g(X)
　[ 判定,描画 … 0or1 ][ f(X),g(X) … Y座標をXを用いて表現]
　X1≦Ｘ≦X2 の範囲で f(X)≦Ｙ≦g(X)、g(X)≦Ｙ≦f(X) の"領域"を描画。

●エリア判定(XX,YYの)
どの"エリア"内に座標(XX,YY)が属するかを調べて、そのエリアIDを返す。
複数エリアにまたがる場合は、全てのエリアIDの論理和を返す。
どのエリアにも属さない場合は、0を返す。
判定に0が設定された項目は判定の対象外となる。

●フィールド描画
設定された背景色で画面をクリアして、
初期化済みデータをもとにフィールドを描画する。
描画に0が設定された項目は描画の対象外となる。

　＠＠　その他　＠＠
ベクトル関連及びその他の関数についての解説は割愛しました。
なお、はっぱさんの3Dライブラリとの競合を避けるため、
「ベクトル」を全て「VECTOR」に置き換えています。

# */

# プログラム定数
！ソフト名　=『たまむれ』
！バージョン=2.04

# 基本設定定数
！衝撃吸収率=0.2
！急傾斜　　=2
！緩傾斜　　=10

# ID定数 ※ IDに2進数を利用するので、2のべき乗
！設定=$0
！床　=$1
！丸　=$2
！壁　=$4
！右坂一=$8
！左坂一=$10
！右坂二=$20
！左坂二=$40
！右射出=$80
！竜巻　=$100
！左降下線　　　=$200
！連続傾斜　　　=$400
！ベルトコンベア=$800
！衝撃吸収剤　　=$1000

# 斜面かどうかを判断するためのID。全ての斜面のIDの(論理)和をとる
斜面系IDとは整数
斜面系ID=丸||右坂一||右坂二||左坂一||左坂二||左降下線||連続傾斜

# 変更可能な設定変数
玉数とは整数
球体半径とは整数
ウェイトとは数値
運動間隔とは数値
反発係数とは数値
現在フィールドとは文字列=『最高傑作』

# フィールド別のデフォルト設定
個別設定とはハッシュ
個別設定@『最高傑作』=「玉数=2{~}球体半径=4{~}ウェイト=0{~}運動間隔=0.2{~}反発係数=0.5{~}G="0,9.8"」
個別設定@『玉群れ』=「玉数=15{~}球体半径=4{~}ウェイト=0.01{~}運動間隔=0.25{~}反発係数=0.4{~}G="0,9.8"」
個別設定@『動くフィールド』=「玉数=4{~}球体半径=6{~}ウェイト=0.01{~}運動間隔=0.25{~}反発係数=1{~}G="0,9.8"」
個別設定@『不思議空間』=「玉数=15{~}球体半径=3{~}ウェイト=0{~}運動間隔=0.15{~}反発係数=1.1{~}G="0,0"」

# フィールド別の乱数発生イベント
ランダム位置とはハッシュ。ランダム速度とはハッシュ
ランダム位置@『最高傑作』は〜_=「{100の乱数+200},{51の乱数-25}」
ランダム速度@『最高傑作』は〜_=「{51の乱数-25},{90の乱数*(-1)+30}」
ランダム位置@『玉群れ』は〜_=「{300の乱数+100},{100の乱数-150}」
ランダム速度@『玉群れ』は〜_=「{51の乱数-25},{21の乱数-10}」
ランダム位置@『動くフィールド』は〜_=「{31の乱数-15+母艦のクライアントW/2},{31の乱数-15+母艦のクライアントH/2}」
ランダム速度@『動くフィールド』は〜_=「{51の乱数-25},{51の乱数-25}」
ランダム位置@『不思議空間』は〜
　Wとは整数=母艦のクライアントW。Hとは整数=母艦のクライアントH
　_=「{W/2の乱数+W/4},{H/2の乱数+H/4}」
ランダム速度@『不思議空間』は〜_=「{51の乱数-25},{51の乱数-25}」

#-----------------------------------#-----------------------------------#
#■■■■■■■■■■■■■ area.nakoここから ■■■■■■■■■■■■■#
#-----------------------------------#-----------------------------------#
#！『area.nako』を取り込む。　　　　#-----------------------------------#
#-----------------------------------#-----------------------------------#
# エリア関連ライブラリ

F_条件退避とは整数=1
！満たされる=1

# 表列定数
！AREA_ID　=0
！AREA_形　=1
！AREA_判定=2
！AREA_描画=3
！AREA_X1　=4
！AREA_Y1　=5
！AREA_X2　=6
！AREA_Y2　=7
！AREA_DATA=8

# エリア基準数
基本エリア幅とは整数=30。　# エリア初期化時に使用
基本エリア高とは整数=20。　# エリア初期化時に使用
基本半径とは整数　　=25。　# エリア初期化時に使用
基本色とは整数　　　=白色。# フィールド描画時に使用 背景色

エリアデータとは配列
エリアイベントとはハッシュ
エリアIDとは配列
該当エリアとは配列
該当時間とは数値

# エリアデータをもとに母艦にフィールドを描画する
●フィールド描画
　Nとは数値。ARRとは配列。Rとは数値
　Tとは数値=システム時間
　母艦を基本色で画面クリア
　エリアデータの『W』を(母艦のクライアントW)に置換
　それの『H』を(母艦のクライアントH)に置換てCSV取得を反復
　　エリアイベント@(対象[AREA_ID])
　　もし対象[AREA_描画]がオフならば続ける
　　対象[AREA_形]で条件分岐
　　　『方形』ならば
　　　　EVAL(対象[AREA_X1]),EVAL(対象[AREA_Y1])からEVAL(対象[AREA_X2]),EVAL(対象[AREA_Y2])へ四角
　　　『円形』ならば
　　　　R=EVAL(対象[AREA_X2])
　　　　EVAL(対象[AREA_X1])-R,EVAL(対象[AREA_Y1])-RからEVAL(対象[AREA_X1])+R,EVAL(対象[AREA_Y1])+Rへ円
　　　『式』ならば
　　　　対象[AREA_DATA]へ多角形

# エリアデータをもとに、XX,YYの点の該当IDを返す
●エリア判定({整数}XX,{整数}YYの)
　返り値とは整数。Xとは数値。ARRとは配列
　Tとは数値=システム時間
　該当エリア=空
　エリアデータの『W』を(母艦のクライアントW)に置換
　それの『H』を(母艦のクライアントH)に置換てCSV取得を反復
　　もし対象[AREA_判定]がオフならば続ける
　　条件初期化
　　対象[AREA_形]で条件分岐
　　　『方形』ならば
　　　　(EVAL(対象[AREA_X1])≦XX)&&(XX≦EVAL(対象[AREA_X2]))が条件
　　　　(EVAL(対象[AREA_Y1])≦YY)&&(YY≦EVAL(対象[AREA_Y2]))が条件
　　　『円形』ならば
　　　　(XX,YYとEVAL(対象[AREA_X1]),EVAL(対象[AREA_Y1])の距離)≦EVAL(対象[AREA_X2])が条件
　　　『式』ならば
　　　　もし(EVAL(対象[AREA_X1])≦XX)&&(XX≦EVAL(対象[AREA_X2]))ならばX=XX
　　　　違えば、続ける
　　　　(EVAL(対象[AREA_Y1])<YY)&&(YY<EVAL(対象[AREA_Y2]))が条件
　　　違えば、続ける
　　もし条件が満たされるならば
　　　返り値=返り値||対象[AREA_ID]
　　　該当エリアに対象を配列追加
　返り値を戻す

# フィールドの元となる二次元配列ARRからエリアデータを作成
# 不正な値が発見された場合はエラーを発する
●エリア初期化({配列}ARRで|ARRの)
　Xとは整数。SARとは配列
　WWとは整数=母艦のクライアントW
　HHとは整数=母艦のクライアントH
　Nとは整数。Mとは整数。Lとは数値
　基本色=白色
　ARRを反復
　　M=回数-1
　　もし対象[AREA_ID]が0ならば
　　　対象[1]で条件分岐
　　　　『幅』ならば基本エリア幅=TOINT(対象[2])
　　　　『高』ならば基本エリア高=TOINT(対象[2])
　　　　『半径』ならば基本半径=TOINT(対象[2])
　　　　『背景色』ならば基本色=TOINT(対象[2])
　　　　『コメント』ならば続ける
　　　続ける
　　エリアIDで対象[AREA_ID]を配列検索
　　もし結果==-1ならば対象[AREA_ID]をエリアIDに配列追加
　　#違えば、「{~}エリアデータ\{結果},0="{対象\0}"：エリアIDが重複しています。」でエラー発生
　　対象[AREA_形]で条件分岐
　　　『方形』ならば
　　　　もし対象[AREA_X2]が空ならばARR[M][AREA_X2]=「{対象[AREA_X1]}+{基本エリア幅}」
　　　　もし対象[AREA_Y2]が空ならばARR[M][AREA_Y2]=「{対象[AREA_Y1]}+{基本エリア高}」
　　　『円形』ならば
　　　　もし対象[AREA_X2]が空ならばARR[M][AREA_X2]=基本半径
　　　『式』ならば
　　　　SAR=空。N=0。L=EVAL(対象[AREA_X2])
　　　　XをEVAL(対象[AREA_X1])からLまで繰り返す
　　　　　もしNが0ならばN=10
　　　　　違えば、もしX<Lならば
　　　　　　N=N-1。続ける
　　　　　SARにINT(X)&『,』&INT(EVAL(対象[AREA_Y1]))を配列追加
　　　　　SARの0にINT(X)&『,』&INT(EVAL(対象[AREA_Y2]))を配列挿入
　　　　ARR[M][AREA_DATA]=SARを『,』で配列結合
　　NをAREA_判定からAREA_Y2まで繰り返す
　　　対象[N]が数列か判定
　　　もしそうならばARR[M][N]=TOINT(対象[N])
　　　違えば
　　　　#おまじない
　　　　エラー監視
　　　　　EVAL(対象[N])
　　　　エラーならば
　　　　　「{~}エリアデータ\{M},{N}="{対象[N]}"：範囲データが不正な値です。」でエラー発生
　　エラー監視
　　　エリアイベント@(対象[AREA_ID])
　　エラーならば
　　　「{~}エリアデータ\{M},0={対象[AREA_ID]}：エリアイベントにおける処理が不正です。」でエラー発生
　エリアデータはARR

# "それ"を返すだけの関数
●結果

#「かつ」の条件を日本語的に複数つなげる。
# 　例)
# 条件初期化
# Aが条件。Bが条件
# Cが条件。Dが条件
# もし条件が満たされるならば〜 ※「AかつBかつCかつD」ならば
●条件({整数=1}Aが)
　F_条件退避=F_条件退避&&A。F_条件退避を戻す
●条件初期化
　F_条件退避=1。1を戻す

# 二進数Bの1である位全てについて、二進数Aの同じ位も1であるか判定する
# 判定例) 二進数1101 は 二進数 0101 を含む
●含む({数値}Aに{数値}Bが|Bを)
　もしB>Aならば0を戻す
　AR1とは配列。AR2とは配列
　AR1=Aを二進数変換を文字列分解。AR1を配列逆順
　AR2=Bを二進数変換を文字列分解。AR2を配列逆順
　AR2を反復
　　もしINT(対象)ならばINT(AR1[回数-1])で条件分岐
　　　1ならば続ける
　　　0ならば0を戻す
　1を戻す

#十進数Nを二進数文字列に変換
●二進数変換({値渡し 整数}Nを)
　もしNが0ならば『0』を戻す
　Iとは整数=INT(LOG2(N))+1
　返り値とは文字列。Mとは整数
　(I)回
　　M=2^(I-回数)
　　返り値にTOSTR(INT(N/M))を追加
　　N=N-M*INT(N/M)
　返り値を戻す
　#[EOFunction]

#二進数文字列Sを十進数に変換
●十進数変換({文字列}Sを)
　S=Sを文字列分解を配列逆順
　返り値とは整数
　Sを反復、返り値=返り値+2^(回数-1)*対象
　返り値を戻す
　#[EOFunction]

●距離({数値}X1,{数値}Y1と{数値}X2,{数値}Y2の)
　SQRT((X1-X2)^2+(Y1-Y2)^2)を戻す
　#[EOFunction]

#-----------------------------------#-----------------------------------#
#■■■■■■■■■■■■■ area.nakoここまで ■■■■■■■■■■■■■#
#-----------------------------------#-----------------------------------#

#-----------------------------------#-----------------------------------#
#■■■■■■■■■■■■■vector.nakoここから■■■■■■■■■■■■■#
#-----------------------------------#-----------------------------------#
#！『vector.nako』を取り込む。　　　#-----------------------------------#
#-----------------------------------#-----------------------------------#
# VECTOR計算ライブラリ

■VECTOR
　・テキスト ←TXT設定→TXT取得 デフォルト
　・TXT設定(V)〜
　　ARRとは配列=Vを『,』で区切る
　　X=TOFLOAT(ARR[0])。Y=TOFLOAT(ARR[1])
　・TXT取得〜
　　_=X&『,』&Y
　・{数値}X
　・{数値}Y
　・{数値}T
　・単位VECTOR〜
　　Lとは数値=長さ
　　X/L&『,』&Y/Lを戻す
　・方向〜
　　もしXが0ならば
　　　_=((Y>0)*PI-(Y<0)*PI)/2
　　違えば、もしYが0ならば
　　　_=(X<0)*PI
　　違えば、
　　　_=ARCTAN(Y/X)+(X<0&&Y>0)*PI-(X<0&&Y<0)*PI
　・長さ〜
　　_=SQRT(X^2+Y^2)

●VECTOR加算({参照渡し グループ}Aに{グループ}Bを)
　A→X=A→X+B→X
　A→Y=A→Y+B→Y

●VECTOR減算({参照渡し グループ}Aから{グループ}Bを)
　A→X=A→X-B→X
　A→Y=A→Y-B→Y

●VECTOR積算({参照渡し グループ}Aに{数値}Bを)
　A→X=A→X*B
　A→Y=A→Y*B

●VECTOR反射({参照渡し グループ}Aを{グループ}Bで)
　θ=B→方向
　Aを(-θ)だけ回転
　A→X=-(A→X)
　Aをθだけ回転

●回転({参照渡し グループ}Aを{数値}RADだけ)〜
　Lとは数値=A→長さ。θとは数値=A→方向+RAD
　A→X=L*COS(θ)。A→Y=L*SIN(θ)

●秒間加算({参照渡し グループ}Aを{グループ}Bで{数値}SEC)
　A→X=A→X+B→X*SEC
　A→Y=A→Y+B→Y*SEC

●成分内積({グループ}Aと{グループ}Bの)
　A→X*B→X+A→Y*B→Yを戻す

●定義内積({グループ}Aと{グループ}Bの)
　A→長さ*B→長さ*COS(AとBの成す角をDEG2RAD)を戻す

●成す角({グループ}Aと{グループ}Bの)
　返り値とは数値=ABS(RAD2DEG(A→方向-B→方向))
　((返り値>180)*2-1)*(360*(返り値>180)-返り値)を戻す

#-----------------------------------#-----------------------------------#
#■■■■■■■■■■■■■vector.nakoここまで■■■■■■■■■■■■■#
#-----------------------------------#-----------------------------------#

ポアメとはポップアップメニュー
これに『なし,E0,終了,ESC,,終わる
なし,P0,ポーズ,SPACE,,ポーズ切替処理
なし,-
なし,F0,フィールドの切替
F0,F1,最高傑作,,,「最高傑作」にフィールド切替
F0,F2,玉群れ,,,「玉群れ」にフィールド切替
F0,F3,動くフィールド,,,「動くフィールド」にフィールド切替
F0,F4,不思議空間,,,「不思議空間」にフィールド切替
なし,-
なし,S0,基本設定
S0,S1,ボールの数,,,玉数変更処理
S0,S2,ボールの半径,,,半径変更処理
S0,S3,ウェイト,,,ウェイト変更処理
S0,S4,運動間隔,,,運動間隔変更処理
S0,S5,反発係数,,,反発係数変更処理
なし,C0,色彩設定
C0,C1,フィールド背景色,,,背景色変更
C0,C2,ボール色を統一する,,,玉色統一
C0,C3,ボール色をランダム変更,,,ランダム玉色
なし,-
なし,V0,バージョン情報,,,バージョン情報
』を一括追加

母艦について
　テキストはソフト名&『 』&バージョン
　スタイルは『枠なし』
　ドラッグ移動はOK
　クライアントW=455
　クライアントH=350
　ポップアップメニューはポアメ

# ポーズ状態=1の時、メインループをコンティニューさせる
ポーズ状態とは整数=いいえ

# 基本VECTOR
重力加速度とはVECTOR
そのY=9.8。※仮想なんだからに現実のm/s^2単位の9.8にする必要はないけど一応。。。
零VECTORとはVECTOR

フィールドデータとはハッシュ
フィールドデータ@『最高傑作』=「{設定},コメント,＠＠自画自賛の最高傑作＠＠
{設定},背景色,{デスクトップ色}
{設定},コメント,　■上の連続斜面
{床},方形,1,1,20,10,100,20
{連続傾斜},式,1,1,100,-COS((X-100)/25)*20+(X-100)/5+35,400,-COS((X-100)/25)*20+(X-100)/5+50
{設定},コメント,　■中央の往復斜面
{床},方形,1,1,50,263,360,273
{床},方形,1,1,345,189,380,199
{左坂一},式,1,1,50,(X-200)/{急傾斜}+277,180,270
{右坂一},式,1,1,200,(X-200)/({-急傾斜})+262,345,262
{壁},方形,1,1,345,199,352,263
{設定},コメント,　■左の連続往復斜面
{壁},方形,1,1,19,160,23,300
{壁},方形,1,1,46,210,50,290
{衝撃吸収剤},方形,1,1,20,195,49,205
{左坂二},式,1,1,20,(X-40)/{緩傾斜}+210,40,215
{左坂二},式,1,1,20,(X-40)/{緩傾斜}+235,40,240
{左坂二},式,1,1,20,(X-40)/{緩傾斜}+260,40,265
{右坂二},式,1,1,28,-(X-25)/{緩傾斜}+223,50,227
{右坂二},式,1,1,28,-(X-25)/{緩傾斜}+248,50,252
{右坂二},式,1,1,28,-(X-25)/{緩傾斜}+273,50,277
{左坂一},式,1,1,20,(X-50)/{急傾斜}+300,50,302
{設定},コメント,　■右の球体群
{設定},半径,15
{丸},円形,1,1,410,160
{丸},円形,1,1,435,195
{丸},円形,1,1,390,200
{丸},円形,1,1,400,235
{丸},円形,1,1,430,250
{丸},円形,1,1,380,290
{丸},円形,1,1,420,290
{床},方形,1,1,425,130,455,140
{設定},コメント,　■左の誘導エリア
{ベルトコンベア},方形,1,1,0,10,20,H
{右射出},方形,1,1,0,0,40,10
{設定},コメント,　■外壁
{床},方形,1,1,-5,H-5,100,H+15
{右坂二},式,1,1,50,(X-50)/({-緩傾斜})+350,460,350
{壁},方形,1,1,-15,0,5,H
{壁},方形,1,1,450,0,470,H」をCSV取得

フィールドデータ@『玉群れ』=「{設定},コメント,＠＠最も初期型の玉群れ＠＠
{設定},背景色,{デスクトップ色}
{設定},コメント,　■メインオブジェ×５
{設定},幅,90
{設定},高,15
{設定},半径,20
{丸},円形,1,1,250,180
{床},方形,1,1,100,150
{床},方形,1,1,300,150
{床},方形,1,1,50,240
{床},方形,1,1,350,240
{設定},コメント,　■特殊＋フレーム
{壁},方形,1,1,-25,0,-10,H
{壁},方形,1,1,W+10,0,W+25,H
{床},方形,1,1,0,H-10,W,H+10
{竜巻},方形,1,1,200,H-10
{設定},コメント,　■判定向上用(非描画・判定有り)
{設定},高,{15+球体半径}
{設定},半径,{20+球体半径}
{丸},円形,1,0,250,180
{床},方形,1,0,100,{150-球体半径}
{床},方形,1,0,300,{150-球体半径}
{床},方形,1,0,50,{240-球体半径}
{床},方形,1,0,350,{240-球体半径}」をCSV取得

フィールドデータ@『動くフィールド』=「{設定},コメント,＠＠動くフィールド＠＠
{設定},背景色,{デスクトップ色}
{設定},コメント,　■動く"床"
{設定},幅,100
{設定},高,15
{床},方形,1,1,(100+T/20)%550-100,250
{床},方形,1,1,450-(200+T/30)%550,150
{床},方形,1,1,(300+T/10)%550-100,50
{設定},コメント,　■動く"壁"
{設定},幅,15
{設定},高,100
{壁},方形,1,1,100,(400+T/10)%450-100
{壁},方形,1,1,200,350-(500+T/20)%450
{壁},方形,1,1,300,(T/30)%550-100
{設定},コメント,　■動く"丸"
{設定},半径,30
{丸},円形,1,1,(400+T/10)%550-100,(100+T/40)%450-100
{丸},円形,1,1,450-(300+T/20)%550,(200+T/30)%450-100
{丸},円形,1,1,(200+T/30)%550-100,350-(300+T/10)%450
{丸},円形,1,1,450-(100+T/40)%550,350-(200+T/20)%450
{設定},コメント,　■フレーム
{壁},方形,1,1,-20,0,20,H
{壁},方形,1,1,W-20,0,W+20,H
{床},方形,1,1,0,-20,W,20
{床},方形,1,1,0,H-20,W,H+20
」をCSV取得

フィールドデータ@『不思議空間』=「{設定},コメント,＠＠不思議空間＠＠
{設定},背景色,{デスクトップ色}
{設定},半径,23
{壁},方形,1,1,-20,0,20,H
{壁},方形,1,1,W-20,0,W+20,H
{床},方形,1,1,0,-20,W,20
{床},方形,1,1,0,H-20,W,H+20
」
XXを1から8まで繰り返し、YYを1から6まで繰り返す
　「{丸},円形,{2の乱数},{2の乱数},{XX*50},{YY*50}」をフィールドデータ@『不思議空間』に一行追加

エリアイベント@床は〜
　塗スタイルは『べた』。塗り色は$808080
　線太さは1。線色は黒色
エリアイベント@丸は〜
　塗スタイルは『べた』。塗り色は$DDDDDD
　線太さは1。線色は青色
エリアイベント@衝撃吸収剤は〜
　塗スタイルは『格子』。塗り色は緑色
　線太さは1。線色は白色
エリアイベント@左坂一は〜
　塗スタイルは『べた』。塗り色は$FFAAAA
　線太さは1。線色は黒色
エリアイベント@右坂一は〜
　塗スタイルは『べた』。塗り色は$FFAAAA
　線太さは1。線色は黒色
エリアイベント@左坂二は〜
　塗スタイルは『べた』。塗り色は$FFAAAA
　線太さは1。線色は黒色
エリアイベント@右坂二は〜
　塗スタイルは『べた』。塗り色は$FFAAAA
　線太さは1。線色は黒色
エリアイベント@連続傾斜は〜
　塗スタイルは『格子』。塗り色は赤色
　線太さは1。線色は黒色
エリアイベント@壁は〜
　塗スタイルは『べた』。塗り色は黒色
　線太さは1。線色は黒色
エリアイベント@ベルトコンベアは〜
　塗スタイルは『縦線』。塗り色は$88FF88
　線太さは1。線色は黒色
エリアイベント@右射出は〜
　塗スタイルは『横線』。塗り色は$88FF88
　線太さは1。線色は黒色
エリアイベント@竜巻は〜
　塗スタイルは『べた』
　塗り色は緑色

# メインループ内の処理で使う変数
BALLとは配列
色とは配列
KEYとは整数
_AとはVECTOR
_BとはVECTOR
_CとはVECTOR
Nとは数値。傾きとは数値
計算VECTORとはVECTOR

右斜面一とはVECTOR
右斜面一を-急傾斜で斜面加速度
左斜面一とはVECTOR
左斜面一を急傾斜で斜面加速度

右斜面二とはVECTOR
右斜面二を-緩傾斜で斜面加速度
左斜面二とはVECTOR
左斜面二を緩傾斜で斜面加速度

現在フィールドにフィールド切替

#-----------------------------------#-----------------------------------#
#　メインループここから　　　　　　 #-----------------------------------#
#-----------------------------------#-----------------------------------#
必要の間
　もしポーズ状態ならば(ウェイト)秒待って続ける
　線太さは1。線色は$999999
　フィールド描画
　玉数の回
　　もしABS(BALL[回数-1]→X)>1000||ABS(BALL[回数-1]→Y)>1000ならば
　　　BALL[回数-1]→位置=ランダム位置@現在フィールド
　　　BALL[回数-1]→速度=ランダム速度@現在フィールド
　　　続ける
　　線太さは1。線色は$333333
　　塗り色は色[回数-1]。塗りスタイルは『べた』
　　BALL[回数-1]→秒間運動(運動間隔)
　　BALL[回数-1]→描画(母艦)
　　KEY=BALL[回数-1]→X,BALL[回数-1]→Yのエリア判定
　　# 流動処理
　　もしKEYに竜巻を含むならば
　　　BALL[回数-1]→速度→X=21の乱数-10
　　　BALL[回数-1]→速度→Y=-75
　　　BALL[回数-1]→加速度=零VECTOR
　　　BALL[回数-1]→反動フラグは3
　　もしKEYにベルトコンベアを含むならば
　　　BALL[回数-1]→速度→X=4の乱数-2
　　　BALL[回数-1]→速度→Y=-20
　　もしKEYに右射出を含むならば
　　　BALL[回数-1]→加速度=「12,0」
　　# 空間処理
　　もしBALL[回数-1]→反動フラグが0ならば
　　　# 何も無い空間
　　　もしKEYが0ならば
　　　　BALL[回数-1]→加速度=重力加速度
　　　　BALL[回数-1]→状態=0
　　　　続ける
　　　# 設置物の処理
　　　もしKEYに床を含むならば # KEYに床を含むならば
　　　　BALL[回数-1]→速度→Y=-BALL[回数-1]→速度→Y*反発係数を四捨五入
　　　　BALL[回数-1]→加速度=零VECTOR
　　　　BALL[回数-1]→反動フラグは2
　　　　KEY=KEY-床
　　　もしKEYに壁を含むならば # 
　　　　BALL[回数-1]→速度→X=-BALL[回数-1]→速度→X*反発係数
　　　　BALL[回数-1]→加速度=重力加速度
　　　　BALL[回数-1]→反動フラグは2
　　　　KEY=KEY-壁
　　　もしKEYに衝撃吸収剤を含むならば # 
　　　　BALL[回数-1]→速度に衝撃吸収率をVECTOR積算
　　　　BALL[回数-1]→加速度=重力加速度
　　　　KEY=KEY-衝撃吸収剤
　　　# 斜面等の処理
　　　_B=BALL[回数-1]→速度
　　　KEYで条件分岐
　　　　右坂一ならば
　　　　　_A=「-1,{-急傾斜}」。_A=_Aの単位VECTOR
　　　　　BALL[回数-1]→加速度=右斜面一
　　　　左坂一ならば
　　　　　_A=「1,{-急傾斜}」。_A=_Aの単位VECTOR
　　　　　BALL[回数-1]→加速度=左斜面一
　　　　右坂二ならば
　　　　　_A=「-1,{-緩傾斜}」。_A=_Aの単位VECTOR
　　　　　BALL[回数-1]→加速度=右斜面二
　　　　左坂二ならば
　　　　　_A=「1,{-緩傾斜}」。_A=_Aの単位VECTOR
　　　　　BALL[回数-1]→加速度=左斜面二
　　　　連続傾斜ならば
　　　　　# Y = -COS((X-100)/15)*20+(X-100)/3+ C
　　　　　# Y'= SIN((X-100)/15)*4/3+1/3
　　　　　N=INT(BALL[回数-1]→X)
　　　　　傾き=-1/(SIN((N-100)/25)*4/5+1/5)
　　　　　BALL[回数-1]→加速度を-傾きで斜面加速度
　　　　　_A=「1,{傾き}」。_A=_Aの単位VECTOR
　　　　左降下線ならば
　　　　　# Y = SQRT(22500-(X-405)^2)/3*2+200
　　　　　# Y'= -2/3*(X-405)/SQRT(22500-(X-405)^2)
　　　　　N=INT(BALL[回数-1]→X)
　　　　　傾き=1/(2/3*(N-400)/SQRT(22500-(N-400)^2))
　　　　　BALL[回数-1]→加速度を-傾きで斜面加速度
　　　　　_A=「1,{傾き}」。_A=_Aの単位VECTOR
　　　　丸ならば
　　　　　もし該当エリアが空ならば続ける
　　　　　_A=BALL[回数-1]→位置
　　　　　_B=「{該当エリア[0][AREA_X1]},{該当エリア[0][AREA_Y1]}」
　　　　　_Aから_BをVECTOR減算。
　　　　　傾き=-(_AのX)/(_AのY)
　　　　　BALL[回数-1]→加速度を傾きで斜面加速度
　　　　　_A=_Aの単位VECTOR
　　　　違えば、続ける
　　　もしBALL[回数-1]→状態がKEYならば
　　　　_C=BALL[回数-1]→位置
　　　　_CをBALL[回数-1]→速度で運動間隔*2,秒間加算
　　　　(_CのX),(_CのY)のエリア判定
　　　　# 次の進行方向にもまだ斜面があるならば＝上空射出などの対処
　　　　もし斜面系IDにそれを含むならば
　　　　　BALL[回数-1]→速度を_Aで反発係数だけ反発
　　　違えば、
　　　　BALL[回数-1]→速度を_Aで反発係数だけ反発
　　　BALL[回数-1]→反動フラグは1
　　　BALL[回数-1]→状態=KEY
　　違えば、
　　　BALL[回数-1]→反動フラグ=BALL[回数-1]→反動フラグ-1
　(ウェイト)秒待つ
#-----------------------------------#-----------------------------------#
#　メインループここまで　　　　　　 #-----------------------------------#
#-----------------------------------#-----------------------------------#

●フィールド切替({文字列}Sに)
　ポーズ状態＝はい
　#-----------------------------------
　＃「現在のフィールドデータ及びその他の設定を保存せずに、{~}フィールドを"{S}"に切り替えます。{~}よろしいですか？」と二択
　#-----------------------------------
　玉数　　=個別設定@(S)@『玉数』
　球体半径=個別設定@(S)@『球体半径』
　ウェイト=個別設定@(S)@『ウェイト』
　運動間隔=個別設定@(S)@『運動間隔』
　反発係数=個別設定@(S)@『反発係数』
　重力加速度=個別設定@(S)@『G』
　現在フィールドはS
　ボール初期化
　フィールドデータ@(S)でエリア初期化
　ポーズ状態＝いいえ

●ポーズ切替処理
　ポーズ状態=1-ポーズ状態
　もしポーズ状態ならばP0→テキスト=『ポーズ解除』
　違えば、P0→テキスト=『ポーズ』

●玉数変更処理
　Nとは整数。ポーズ状態＝はい
　ダイアログ初期値は玉数
　「ボールの数を入力してください。(１〜５０個){~}ただし、数が多過ぎると動作が重くなります。」と尋ねる
　N=INT(それ)
　もしN≦0ならば
　　「設定を変更しません。{~}ボールの数は、{玉数} 個です。」と言う
　　ポーズ状態＝いいえ。戻る
　違えば、もしN＞50ならばN=50
　「設定を変更します。{~}ボールの数は、{N} 個です。」と言う
　玉数=N。ボール初期化
　ポーズ状態＝いいえ

●半径変更処理
　Nとは整数。ポーズ状態＝はい
　ダイアログ初期値は球体半径
　「ボールの半径を入力してください。(１〜１０)」と尋ねる
　N=INT(それ)
　もしN≦0ならば
　　「設定を変更しません。{~}ボールの半径は、{球体半径} です。」と言う
　　ポーズ状態＝いいえ。戻る
　違えば、もしN＞10ならばN=10
　「設定を変更します。{~}ボールの半径は、{N} です。」と言う
　球体半径=N。ボール初期化
　ポーズ状態＝いいえ

●ウェイト変更処理
　Nとは実数。ポーズ状態＝はい
　ダイアログ初期値はウェイト
　「ウェイト(描画間隔)を入力してください。(０〜１秒){~}※小数点３桁までを推奨します。{~}※快適に見られる環境では０秒を推奨します。」と尋ねる
　もしそれが空ならば
　　「設定を変更しません。{~}ウェイトは、 {ウェイト} 秒です。」と言う
　　ポーズ状態＝いいえ。戻る
　N=FLOAT(それ)
　もしN＜0ならばN=0
　違えば、N＞1ならばN=1
　「設定を変更します。{~}ウェイトは、{N} 秒です。」と言う
　ウェイト=N。ポーズ状態＝いいえ

●運動間隔変更処理
　Nとは実数。ポーズ状態＝はい
　ダイアログ初期値は運動間隔
　「運動間隔(速度計算用の間隔)を入力してください。{~}（精密 ０＜Ｔ[秒]≦１ 粗雑）{~}※0.2〜0.4を推奨します。」と尋ねる
　N=FLOAT(それ)
　もしN≦0ならば
　　「設定を変更しません。{~}運動間隔は、 {運動間隔} 秒です。」と言う
　　ポーズ状態＝いいえ。戻る
　違えば、N＞1ならばN=1
　「設定を変更します。{~}運動間隔は、{N} 秒です。」と言う
　運動間隔=N。ポーズ状態＝いいえ

●反発係数変更処理
　Nとは実数。ポーズ状態＝はい
　ダイアログ初期値は反発係数
　「反発係数を入力してください。（０〜２）{~}※物理学的には反発係数が１より大きいことはありえません。{~}※そのため通常の場合は、0.2〜0.8を推奨します。」と尋ねる
　もしそれが空ならば
　　「設定を変更しません。{~}反発係数は、 {反発係数} です。」と言う
　　ポーズ状態＝いいえ。戻る
　N=FLOAT(それ)
　もしN＜0ならばN=0
　違えば、N＞2ならばN=2
　「設定を変更します。{~}反発係数は、{N} です。」と言う
　反発係数=N。ポーズ状態＝いいえ

●背景色変更
　ポーズ状態＝はい
　「フィールドの背景色を変更します。{~}設定したい色を選んでください。{~}（デフォルト：デスクトップ背景色）」と言う
　ダイアログキャンセル値=空
　COLとは整数。COL=色選択
　もしCOL≠空ならば基本色はINT(COL)
　ポーズ状態＝いいえ

●玉色統一
　ポーズ状態＝はい
　「全ての玉の色を１つの色に統一します。{~}設定したい色を選んでください。」と言う
　ダイアログキャンセル値=空
　COLとは整数。COL=色選択
　もしCOL≠空ならば
　　玉数の回、色[回数-1]=COL
　ポーズ状態＝いいえ

●ランダム玉色
　色は空。
　玉数の回、色に白色の乱数を配列追加

●ボール初期化
　システム時間で乱数初期化
　BALLは空
　玉数の回
　　BALL[回数-1]をボールとして作成
　　BALL[回数-1]→位置=ランダム位置@現在フィールド
　　BALL[回数-1]→速度=ランダム速度@現在フィールド
　　BALL[回数-1]→半径=球体半径
　ランダム玉色

#y=axの場合、B=1/a
●斜面加速度({参照渡し グループ}Aを{数値}Bで)
　計算VECTOR=「{B},1」。#　。_C=「1,{-B}」
　θとは数値。θ=計算VECTORの方向-PI/2。
　A=重力加速度。Aをθだけ回転
　AにCOS(θ)をVECTOR積算。
　＃θ=_Cの方向-PI/2。
　＃_A=重力加速度。_Aをθだけ回転
　＃_Aに-COS(θ)をVECTOR積算
　＃Aに_AをVECTOR加算。
　＃Aに重力加速度をVECTOR加算

●反発({参照渡し グループ}Aを{グループ}Bで{数値}Nだけ)
　θとは数値=B→方向
　Aを(-θ)だけ回転
　A→X=-(A→X)*Nを四捨五入
　Aをθだけ回転

■ボール
　・X ←X設定→X取得
　・X設定(V)〜位置のX=V
　・X取得〜_=位置のX
　・Y ←Y設定→Y取得
　・Y設定(V)〜位置のY=V
　・Y取得〜_=位置のY
　・{VECTOR}位置
　・{VECTOR}速度
　・{VECTOR}加速度
　・{数値}半径
　・{数値}内臓時間
　・{整数}反動フラグ
　・{整数}状態
　・秒間運動({数値}SEC)〜
　　速度を加速度で(SEC)秒間加算
　　位置を速度で(SEC)秒間加算
　・描画({グループ=?母艦}OBJに)〜
　　XXとは数値=位置のX。YYとは数値=位置のY
　　OBJのXX-半径,YY-半径からXX+半径,YY+半径へ円

●バージョン情報
　「
作者　　　：  U D 
ソフト名　： {ソフト名}
バージョン： Ver.{バージョン}

※このソフトを使って生じた弊害などに対して、
　作者は責任を一切負いません。
※プログラムの一部利用・改造等は全面的に許可します。
　連絡は不要ですが、同様に自己責任とします。
」と言う


