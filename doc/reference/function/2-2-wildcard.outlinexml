<?xml version="1.0" encoding="Shift_JIS"?>
<outline>
	<item title="ワイルドカード">
		<text>
			♪概要&#13;
			なでしこのワイルドカードはVisualBasicの&quot;Like&quot;の上位互換です。一部に独自の拡張を施すしているので強力です。&#13;
		</text>
		<childitems>
			<item title="ワイルドカードとは？">
				<text>
					ワイルドカードは、トランプのジョーカーに似ています。「?」や「*」の記号を用いることで、あらゆる文字を表すことができるのです。一般的には、ファイルを検索するときや、データベースを検索するときに使います。&#13;
					&#13;
					例えば、ファイルを検索するときに、「*.txt」を検索すると、「aaa.txt」や「bbb.txt」、「ccc.txt」など、ワイルドカードのパターンに一致したファイルを検索結果として取り出すことができます。&#13;
					&#13;
					ワイルドカードの意味としては、「*」が任意の複数文字、「?」が任意の１文字を表します。&#13;
					&#13;
					ですので、「no?.txt」を検索すれば、「no1.txt」、「no2.txt」、「no3.txt」などが取り出されます。&#13;
					&#13;
				</text>
			</item>
			<item title="ワイルドカードで調べる">
				<text>
					なでしこで、ある文字列が、ワイルドカードのパターンに一致するかどうか調べるには、『ワイルドカード一致』という命令を使います。&#13;
					&#13;
					以下は、ワイルドカードのパターンを「*.doc」にして、ファイル一覧から一つずつパターンに一致するかどうか調べるプログラムです。&#13;
					&#13;
					プログラム:一致.nako&#13;
					&#13;
					♪ソース〜━━━━━&#13;
					パターンは「*.doc」&#13;
					ファイル一覧は「2005年顧客名簿.xls&#13;
					2006年顧客名簿.xls&#13;
					2005年決算報告.doc&#13;
					2006年決算報告.doc」&#13;
					&#13;
					ファイル一覧を反復&#13;
					&#32;&#32;&#32;&#32;対象がパターンにワイルドカード一致するか。&#13;
					　　もし、それがはいならば、対象を表示。&#13;
					━━━━━&#13;
					&#13;
					これを実行すると、&quot;.doc&quot;の拡張子を持つ以下の２つが表示されます。&#13;
					&#13;
					・2005年決算報告.doc&#13;
					・2006年決算報告.doc&#13;
					&#13;
					次に「2005年*」というパターンで調べてみます。&#13;
					&#13;
					プログラム:一致2.nako&#13;
					&#13;
					♪ソース〜━━━━━&#13;
					パターンは「2005*」&#13;
					ファイル一覧は「2005年顧客名簿.xls&#13;
					2006年顧客名簿.xls&#13;
					2005年決算報告.doc&#13;
					2006年決算報告.doc」&#13;
					&#13;
					ファイル一覧を反復&#13;
					&#32;&#32;&#32;&#32;対象がパターンにワイルドカード一致するか。&#13;
					　　もし、それがはいならば、対象を表示。&#13;
					━━━━━&#13;
					&#13;
					これを実行すると、以下のように2005年から始まるファイルが表示されます。&#13;
					&#13;
					・2005年顧客名簿.xls&#13;
					・2005年決算報告.doc&#13;
					&#13;
					このように、ワイルドカードを使うと、そのパターンに合うものだけを取り出すことができるので、とても便利です。&#13;
					&#13;
				</text>
			</item>
			<item title="ワイルドカードの規則">
				<text>
					なでしこで使えるワイルドカードをまとめたのが以下の表です。&#13;
					&#13;
					,パターン,&#32;意味&#13;
					,*,&#32;任意の０文字以上の文字列&#13;
					,?,&#32;任意の１文字&#13;
					,#,&#32;任意の数字１字&#13;
					,[str],&#32;strに指定した文字列のうちのどれか１文字&#13;
					,[!str],&#32;strに指定した文字列以外の１文字&#13;
					,[*str],&#32;strのどれか１文字の０回以上の繰り返し&#13;
					,[+str],&#32;strのどれか１文字の１回以上の繰り返し&#13;
					,[=a|b],&#32;文字列aかbのどちらか&#13;
					,[*!str],&#32;str以外の０回以上の繰り返し&#13;
					,[+!str],&#32;str以外の１回以上の繰り返し&#13;
					,\,&#32;シーケンス文字。\tでタブ、\nで改行、\[で[の意味&#13;
					,(str),&#32;strに一致する部分を別途抽出する&#13;
					&#13;
					※ＶＢのLikeでは、上の&quot;*&quot;から&quot;[!str]&quot;までが使えます。&#13;
					&#13;
					それでは、上で解説しなかった部分を解説します。&#13;
				</text>
				<childitems>
					<item title="『#』のパターン">
						<text>
							『#』は任意の数字１字を表します。郵便番号などが正しく入力されたか調べるのに便利でしょう。&#13;
							&#13;
							以下のプログラムは、郵便番号を尋ね、入力された形式が、「###-####」のパターンにあてはまるか確認する例です。&#13;
							&#13;
							プログラム:郵便番号チェック.nako&#13;
							&#13;
							♪ソース〜━━━━━&#13;
							「郵便番号は？(###-####)」と尋ねる。&#13;
							郵便番号は、それ。&#13;
							郵便番号を「###-####」でワイルドカード一致。&#13;
							もし、それがはいならば&#13;
							　　「正しく入力されました」と言う&#13;
							違えば&#13;
							　　「形式が違います。」と言う。&#13;
							━━━━━&#13;
							&#13;
							例えば、「123-4567」と入力すれば、「正しく入力されました」と表示され、&#13;
							「abc-defg」や「12-3456」と入力すると、「形式が違います」と表示されます。&#13;
						</text>
					</item>
					<item title="『[str]』のパターン">
						<text>
							『[str]』のパターンでは、strに指定した文字列のうち、どれか１文字を表します。例えば、時間を入力する場合に、「12:30:00」と書く人もいれば、「12時30分00秒」と書く人もいます。このどちらかの形式のどちらでも良い場合、パターンに、『*[時:]*[分:]*』と指定すれば、漢字で書いても、コロン(「:」)で書いても良いことになります。&#13;
							&#13;
							以下のプログラムは、いろいろな形式の文字列データを１行ずつ調べていって、時間の形式『*[時:]*[分:]*』に当てはまるものだけを表示する例です。&#13;
							&#13;
							プログラム:時間チェック.nako&#13;
							&#13;
							♪ソース〜━━━━━&#13;
							パターンは「*[時:]*[分:]*」&#13;
							データは「2005/1/1&#13;
							20時30分20秒&#13;
							04:05:12&#13;
							2005年1月20日」&#13;
							&#13;
							データを反復&#13;
							　　対象をパターンでワイルドカード一致。&#13;
							&#32;&#32;&#32;&#32;もし、それがはいならば、対象を表示。&#13;
							━━━━━&#13;
							&#13;
							このプログラムを実行すると、以下の通り、時間形式のデータだけを表示することができます。&#13;
							&#13;
							・20時30分20秒&#13;
							・04:05:12&#13;
							&#13;
							また、strに指定する文字列は『[a-c]』のように指定して、aからcまでの範囲を表すこともできます。&#13;
							&#13;
							以下のプログラムは、アルファベットをチーム名にしたデータの中から、BチームからDチームまでの範囲を表示します。&#13;
							&#13;
							プログラム:一致3.nako&#13;
							&#13;
							♪ソース〜━━━━━&#13;
							「Aチーム&#13;
							Bチーム&#13;
							Cチーム&#13;
							Dチーム&#13;
							Eチーム」を反復&#13;
							　　対象が「[B-D]チーム」にワイルドカード一致するか。&#13;
							&#32;&#32;&#32;&#32;もし、それがはいならば、対象を表示。&#13;
							━━━━━&#13;
							&#13;
							プログラムを実行すると、以下のようにＢ〜Ｄのチーム名が表示されます。&#13;
							&#13;
							・Bチーム&#13;
							・Cチーム&#13;
							・Dチーム&#13;
							&#13;
						</text>
					</item>
					<item title="『[!str]』のパターン">
						<text>
							次にワイルドカードの『[!str]』のパターンですが、これは、strに指定した以外の１文字を表します。&#13;
							&#13;
							数字以外の１文字を表す場合は、『[!0-9]』と指定できます。&#13;
							&#13;
						</text>
					</item>
					<item title="『[*str]』『[+str]』のパターン">
						<text>
							これは、strに指定した文字列のうちのどれかが繰り返し使われた場合のパターンを表します。&#13;
							&#13;
							プログラムとして書くと、若干見づらくなってしまいますので、パターンがマッチするかどうかだけを書いてみます。&#13;
							&#13;
							,対象文字列,&#32;ワイルドカード,&#32;結果&#13;
							,すもも,す[*も],はい&#13;
							,すもももももも,す[*も],はい&#13;
							,すし,す[*も],いいえ&#13;
							&#13;
							このように、『す[*も]』と書いた場合、「すもも」も「すももももも」もマッチするのです。しかし、「すし」には、「も」が含まれないので、マッチしません。&#13;
							&#13;
							さて、『[*str]』と『[+str]』の違いですが、『[*str]』を指定した場合は、0文字以上の繰り返しです。そして、『[+str]』と指定した場合は、1文字以上の繰り返しです。&#13;
							&#13;
							即ち、『[*str]』の場合は、strに指定した文字列があってもなくても良く、『[+str]』の場合は、必ず１文字以上はないとマッチしないということになります。&#13;
							&#13;
							,対象文字列,&#32;ワイルドカード,&#32;結果&#13;
							,す,す[*も],はい&#13;
							,す,す[+も],いいえ&#13;
							,すし,す[*め]し,はい&#13;
							,すし,す[+め]し,いいえ&#13;
						</text>
					</item>
					<item title="『[=a|b]』のパターン">
						<text>
							これは、文字列aか、文字列bのどちらかを表します。&#13;
							&#13;
							,対象文字列,&#32;ワイルドカード,&#32;結果&#13;
							,トマト,ト[=マト|ースト],はい&#13;
							,トースト,ト[=マト|ースト],はい&#13;
							,トイレ,ト[=マト|ースト],いいえ&#13;
						</text>
					</item>
					<item title="『(str)』のパターン">
						<text>
							『(str)』は特別な意味を持ちます。パターンを、『(a*c)』のようにカッコで括ると、カッコの内側にマッチした文字を抽出することができます。&#13;
							&#13;
							抽出した文字列は、『抽出文字列』という変数に代入されます。以下のプログラムを実行して結果を確かめてみましょう。&#13;
							&#13;
							プログラム:抽出文字列.nako&#13;
							&#13;
							♪ソース〜━━━━━&#13;
							「123-456」を「(*)-(*)」でワイルドカード一致。&#13;
							抽出文字列を言う。&#13;
							━━━━━&#13;
							&#13;
							このプログラムを実行すると、以下のようにカッコで括った部分にマッチした文字列を抜き出すことができます。&#13;
							&#13;
							・123&#13;
							・456&#13;
							&#13;
						</text>
					</item>
				</childitems>
			</item>
			<item title="ワイルドカード置換">
				<text>
					ワイルドカードを使って文字列を置換することができます。&#13;
					&#13;
					プログラム:ワイルドカード置換.nako&#13;
					&#13;
					♪ソース〜━━━━━&#13;
					文章は「東京大学を受験〜東大に合格」&#13;
					文章の「東[*京]大[*学]」を「京大」にワイルドカード置換。&#13;
					それを言う&#13;
					━━━━━&#13;
					&#13;
					これを実行すると『京大を受験〜京大に合格』と置換されます。&#13;
				</text>
			</item>
			<item title="ワイルドカード区切る">
				<text>
					ワイルドカードで文字列を区切ることもできます。&#13;
					&#13;
					プログラム:ワイルドカード区切る.nako&#13;
					&#13;
					♪ソース〜━━━━━&#13;
					「2005/02/03&#32;04:22:11」を「[/:&#32;]」でワイルドカード区切る。&#13;
					それを言う。&#13;
					━━━━━&#13;
					&#13;
					これを実行すると、&quot;/&quot;や&quot;:&quot;や&quot;&#32;&quot;で区切られるので、結果以下のように各数値のみを取り出すことができます。&#13;
					&#13;
					♪ソース〜→→→&#13;
					2005&#13;
					02&#13;
					03&#13;
					04&#13;
					22&#13;
					11&#13;
					→→→&#13;
				</text>
			</item>
		</childitems>
	</item>
</outline>

