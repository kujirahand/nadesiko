★制御構文

=lead
　なでしこには日本語を用いたさまざまな制御構文でプログラムの流れを
制御することができます。

■繰り返し

●単純な繰り返し

同じプログラムを何度も繰り返す場合、『？回、〜する。』のように書くと
プログラムが繰り返されます。

=code
10回「こんにちは」と表示。
=/code

また、繰り返したい文章が複数の文に分かれるときは、以下のように
インデントで字下げして、繰り返したいプログラムを書きます。

=code
10回
　　「こんにちは」と表示。
　　「やぁ！」と表示。
=/code

現在何回目の繰り返しなのかを知るには、システム変数の『回数』を使います。

♪ソース〜＠＠
１０回
　　「今は｛回数｝回目の繰り返し」と表示。
＠＠

また、繰り返しの最後を明示したい場合は「ここまで」
または「ここまで回」と書きます。

♪ソース〜＠＠
１０回
　　「わん」と表示
ここまで
＠＠

１つのブロックが長い場合や、入れ子が複雑な場合に、
「ここまで回」を記述することで構文の終わりをチェックさせることが
できます。詳しくは後述します。

●カウンター付きの繰り返し

繰り返しの最中に、今何回目の繰り返しかを知りたい場合がよくあります。
そんなときは、カウンター付きの繰り返しを使うと便利です。
これは、『(カウンター変数名)で、(開始値)から、(終了値)まで、繰り返す』と
書きます。

=code
カウンタで１から８まで繰り返す
　　「今は、｛カウンタ｝回目の実行です。」と表示。
　　「こんにちは」と表示。
=/code

カウンター変数を省略して書くと、変数「それ」をカウンタの代わりに使います。
=code
２から５まで繰り返す
　　それを表示。
=/code

●条件付きの繰り返し

さらに繰り返しですが、何回繰り返すというのではなくて、
この条件の間繰り返したいという場合もあります。
この場合は、『（条件式）の間〜する』と書きます。

=code
Ａは１
Ａが１０以下の間
　　「Ａ＝｛Ａ｝」と表示。
　　Ａに１を足して、Ａに代入。
=/code

単純な条件の場合は、『ＡがＢ以下』や『ＡがＢ以上』『ＡがＢ未満』『ＡがＢ超』などの
日本語らしい条件を書くことができます。

もっと複雑な条件式を書くときは以下のように書きます。

=code
Ａ＝１
(A*2 < 50)の間
　　「Ａ＝｛Ａ｝」と表示。
　　Ａに２を足してＡに代入。
=/code
　
■条件分岐

条件によって実行するプログラムを変更したいときに、条件分岐の構文を使います。

●単純な分岐

単純な分岐には、次のような構文を用います。
『もし（条件）ならば（真の式）違えば（偽の式）』。

=code
天気は「雨」
もし、天気が「晴れ」ならば
　　「遠足に行く」と表示
違えば
　　「遠足中止」と表示。
=/code

『もし〜ならば〜違えば〜』構文では、『違えば』の直後に
『もし〜』とつなげることで連続した分岐判定を行えます。

=code
天気は「雪」
もし、天気が「晴れ」ならば
　　「遠足に行く」と表示
違えば、もし、天気が「雨」ならば
　　「遠足中止」と表示
違えば、もし、天気が「雪」ならば
　　「雪合戦」と表示
違えば
　　「連絡を待つ」と表示
ここまで
=/code

●複雑な分岐

分岐する項目が多いときは、『Ａで条件分岐。Ｂならば〜。Ｃならば〜。違えば〜。』という
書式の構文を使います。

=code
天気は「雪」。
天気で条件分岐
　　「晴れ」ならば、「遠足に行く」と表示。
　　「雨」ならば、「授業に変更」と表示。
　　「曇り」ならば、「遠足と授業の用意をして登校」と表示。
　　「雪」ならば、「雪合戦の準備をして登校」と表示。
　　違えば、「授業に変更」と表示。
=/code

注意としては、条件分岐を使う場合は、必ず、「条件分岐」と書いた後に、
インデントで条件を字下げする必要があることです。

■各要素を反復実行

『反復』構文は、他の言語でいうイテレーター（反復子）の働きをします。
例えば、文章がならば、文章の各一行ずつを順に反復して実行します。
また、配列変数ならば、配列変数の各要素を反復実行します。

書式は、『（データ）を反復。（反復内容）』です。

　『反復』構文の実行では、各要素を、変数『それ』に代入してから
反復内容を実行します。

　以下のプログラムは、文章の各行を表示します。

=code
「あああああ
いいいいい
ううううう
えええええ
おおおおお」を、反復
　　それを表示。
=/code

また、変数『それ』の内容は命令実行と共に書き換えられてしまうことが多いので
変数『対象』にも、変数『それ』と同じ値が代入されるようになっています。

=code
「あああああ
いいいいい
ううううう
えええええ
おおおおお」を、反復
　　対象を表示。
=/code


■例外処理

　ファイルの読み取りなどは常に成功するとは限りません。
ファイルがなかったり、ロックされているとエラーで読み取ることができずエラーが起きます。
しかし、エラーが起きては困ることがあります。そんなとき使うのが、例外処理です。

=code
エラー監視
　　「存在しないファイル」を読む
エラーならば
　　「ファイルが開けませんでした。｛改行｝」＆
　　「{エラーメッセージ}」と言う
=/code

「エラー監視」から「エラーならば」の間に書いたプログラム中を実行中にエラーが発生した場合に、
「エラーならば」以降のプログラムを実行します。


■インデントについて

　字下げ（インデント）は、基本的に、半角・全角スペースで行います。
全角スペースは、半角スペース２つ分として計算します。

　また、タブでのインデントは、タブの位置によって１〜４文字として計算しますが、
タブは、エディタの設定タブ幅によって幅が違うので、混乱の元になるので、
あまりおすすめしません。


■『ここまで』について

『回』『反復』『もし』などのインデントを使う制御構文で
構文の最後が分かりにくい時があります。
そのときに、『ここまで』と構文の最後を明示できるようにするものです。

♪ソース〜→→→
１０回
　　「わん」と表示
ここまで回
→→→

もし、おかしなところで、『ここまで』と書くとエラーになります。
そのため、インデントが複雑な場合に文法チェックするのにも役立ちます。

♪ソース〜→→→
１０回
　　「わん」と表示
　　ここまで回　＃　エラー
→→→

また『ここまで』の後に書く制御構文の名前は省略ができます。

♪ソース〜→→→
１０回
　　「わん」と表示
ここまで
→→→



