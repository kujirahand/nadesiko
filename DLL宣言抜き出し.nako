REM = 「 DLL宣言の取得
cnako.exe "%0"
exit
REM 」
#----------------------------------------------------------
# dnako.dpr からDLL宣言を取得する
#----------------------------------------------------------
インポート変数定義＝「var // インポート関数の名前を宣言
」
インポート代入処理＝「」

#----------------------------------------------------------
# APIソースの切り取り
#----------------------------------------------------------
S=「{母艦パス}dnako.dpr」を開く。
SRC=Sの「///<DNAKOAPI:BEGIN>」から「///<DNAKOAPI:END>」まで範囲切り取る。
SRCを反復
　対象の１から4文字抜き出す。
　もし((それ=「func」)||(それ=「proc」))ならば
　　　対象をAPI取得処理
　違えば
　　　続ける。

雛型の「@@VAR@@」をインポート変数定義に置換。
「@@ADDRESS@@」をインポート代入処理に置換。
「{母艦パス}hi_unit\dnako_import.pas」へ保存。
おわり。

●API取得処理（Sを）
　　タイプ＝Sの「 」まで切り取る
　　メソッド定義＝Sの「//」まで切り取る
　　解説＝トリム（S）
　　＃引数付きかどうか？
　　メソッド名＝「;xxx;」
　　引数定義=「」
　　リターンタイプ＝「」
　　もし、(メソッド定義で「(」が何文字目) > 0 ならば
　　　　メソッド名＝メソッド定義の「(」まで切り取る
　　　　引数定義＝メソッド定義の「)」まで切り取る
　　　　メソッド定義の「:」まで切り取る。
　　違えば
　　　　SS＝メソッド定義の「;」まで切り取る。
　　　　メソッド名＝SSの「:」まで切り取る
　　　　メソッド定義＝SS
　　もし、タイプ＝「function」ならば
　　　　リターンタイプ＝メソッド定義の「;」まで切り取る。
　　　　リターンタイプ＝「:{リターンタイプ}」
　　インポート変数定義＝インポート変数定義＆「  //●{解説}
  {メソッド名} : {タイプ} ({引数定義}){リターンタイプ}; stdcall;
」
　　インポート代入処理＝インポート代入処理＆「  {メソッド名} := GetProcAddress(dnako_import_handle,'{メソッド名}');」&改行

#-----------------------------------------------------------------------
!雛型は『
unit dnako_import;
///
/// dnako.dll の API を定義したもの
/// generated by DLL宣言抜き出し.nako
///
interface

uses
  Windows, SysUtils, dnako_import_types;

/// DLLの取り込み
function dnako_import_init(dllfile: string): THandle;
procedure dnako_import_initFunctions(handle: THandle);

const
  nako_OK= 1;
  nako_NG = 0;

/// APIの定義
@@VAR@@

implementation

// dnako.dll のメインハンドル
var
  dnako_import_handle: THandle = 0;

/// DLLの取り込み
function dnako_import_init(dllfile: string): THandle;
begin
  if dnako_import_handle <> 0 then
  begin
  	Result := dnako_import_handle; Exit;
  end;
  // load
  // --- DEFAULT : PACKFILE
  dnako_import_handle := LoadLibrary(PChar(dllfile));
  // --- in APPPATH or WINDOWS or SYSTEM32
  if dnako_import_handle = 0 then
  begin
    dnako_import_handle := LoadLibrary('dnako.dll');
    if dnako_import_handle = 0 then // ダメ元で読んでみる
    begin
      dnako_import_handle := LoadLibrary('plug-ins\dnako.dll');
    end;
  end;
  if dnako_import_handle = 0 then
  begin
  	Result := 0; Exit;
  end;
  Result := dnako_import_handle;
  // get address
  dnako_import_initFunctions(Result);
end;

procedure dnako_import_initFunctions(handle: THandle);
begin
  dnako_import_handle := handle;
  // get address
@@ADDRESS@@
end;

end.
』

